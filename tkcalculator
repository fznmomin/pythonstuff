from tkinter import *

import parser

root = Tk()

root.title('Calculator')

i = 0

def factorial():

    """Factorial calculation...."""

    entire_string = display.get()

    number = int(entire_string)

    fact = 1

    counter = number

    try:

        while counter > 0:

            fact = fact*counter

            counter -= 1

        clear_full()

        display.insert(0, fact)

    except Exception:

        clear_full()

        display.insert(0, "Error")

def clear_full():

    """clears the Entry widget content"""

    display.delete(0, END)

def get_values(numb):

    """Fetch operands entered by user and display it in the entry widget"""

    global i

    display.insert(i, numb)

    i += 1

def get_computation(operator):

    """Fetch the operands that the user want to apply on a function"""

    global i

    length = len(operator)

    display.insert(i, operator)

    i += length

def undo():

    """Delete the last entered operator/variable from entry widget"""

    entire_string = display.get()

    if len(entire_string):        ## repeats until

        ## Decrement string by one index

        string_new = entire_string[:-1]

        print(string_new)

        clear_full()

        display.insert(0, string_new)

    else:

        clear_full()

        display.insert(0, "Error, press AC")

def calculate():

    """

    Evaluates the expression

    ref : http://stackoverflow.com/questions/594266/equation- parsing-in-python

    """

    entire_string = display.get()

    try:

        formulae = parser.expr(entire_string).compile()

        reslt = eval(formulae)

        clear_full()

        display.insert(0, reslt)

    except Exception:

        clear_full()

        display.insert(0, "Error!")

root.columnconfigure(0,pad=3)

root.columnconfigure(1,pad=3)

root.columnconfigure(2,pad=3)

root.columnconfigure(3,pad=3)

root.columnconfigure(4,pad=3)

root.rowconfigure(0,pad=3)

root.rowconfigure(1,pad=3)

root.rowconfigure(2,pad=3)

root.rowconfigure(3,pad=3)

display = Entry(root, font = ("Calibri", 13))

display.grid(row = 1, columnspan = 6    , sticky = W+E)

one = Button(root, text = "1", command = lambda : get_values(1), font=("Calibri", 12))

one.grid(row = 2, column = 0)

two = Button(root, text = "2", command = lambda : get_values(2), font=("Calibri", 12))

two.grid(row = 2, column = 1)

three = Button(root, text = "3", command = lambda : get_values(3), font=("Calibri", 12))

three.grid(row = 2, column = 2)

four = Button(root, text = "4", command = lambda : get_values(4), font=("Calibri", 12))

four.grid(row = 3 , column = 0)

five = Button(root, text = "5", command = lambda : get_values(5), font=("Calibri", 12))

five.grid(row = 3, column = 1)

six = Button(root, text = "6", command = lambda : get_values(6), font=("Calibri", 12))

six.grid(row = 3, column = 2)

seven = Button(root, text = "7", command = lambda : get_values(7), font=("Calibri", 12))

seven.grid(row = 4, column = 0)

eight = Button(root, text = "8", command = lambda : get_values(8), font=("Calibri", 12))

eight.grid(row = 4, column = 1)

nine = Button(root , text = "9", command = lambda : get_values(9), font=("Calibri", 12))

nine.grid(row = 4, column = 2)

cls = Button(root, text = "AC", command = clear_full, font=("Calibri", 12), foreground = "red")

cls.grid(row = 5, column = 0)

zero = Button(root, text = "0", command = lambda : get_values(0), font=("Calibri", 12))

zero.grid(row = 5, column = 1)

reslt = Button(root, text = "=", command = calculate, font=("Calibri", 12), foreground = "red")

reslt.grid(row = 5, column = 2)

plus = Button(root, text = "+", command = lambda : get_computation("+"), font=("Calibri", 12))

plus.grid(row = 2, column = 3)

minus = Button(root, text = "-", command = lambda : get_computation("-"), font=("Calibri", 12))

minus.grid(row = 3, column = 3)

multiply = Button(root,text = "*", command = lambda : get_computation("*"), font=("Calibri", 12))

multiply.grid(row = 4, column = 3)

divide = Button(root, text = "/", command = lambda : get_computation("/"), font=("Calibri", 12))

divide.grid(row = 5, column = 3)

# Including new operations

pi = Button(root, text = "pi", command = lambda: get_computation("*3.14"), font =("Calibri", 12))

pi.grid(row = 2, column = 4)

modulo = Button(root, text = "%", command = lambda : get_computation("%"), font=("Calibri", 12))

modulo.grid(row = 3, column = 4)

left_bracket = Button(root, text = "(", command = lambda: get_computation("("), font =("Calibri", 12))

left_bracket.grid(row = 4, column = 4)

exp = Button(root, text = "exp", command = lambda: get_computation("**"), font = ("Calibri", 10))

exp.grid(row = 5, column = 4)

undo_button = Button(root, text = "<-", command = undo, font =("Calibri", 12), foreground = "red")

undo_button.grid(row = 2, column = 5)

fact = Button(root, text = "x!", command = factorial, font=("Calibri", 12))

fact.grid(row = 3, column = 5)

right_bracket = Button(root, text = ")", command = lambda: get_computation(")"), font =("Calibri", 12))

right_bracket.grid(row = 4, column = 5)

square = Button(root, text = "^2", command = lambda: get_computation("**2"), font = ("Calibri", 10))

square.grid(row = 5, column = 5)

root.mainloop()
